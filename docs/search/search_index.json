{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started This site contains documentation for Foldersync android app. Installation You can get FolderSync by purchasing the app Google Play or on our website . Technical requirements Requires Android 6.0 or newer. Tested to work on phones and tablets with Android OS. Android TV, Android Auto, Chromebook etc. are not officially supported (but might work). Does not require Google Play services to function. Does not require internet connection to function (if you want to sync on internal network).","title":"Getting started"},{"location":"#getting-started","text":"This site contains documentation for Foldersync android app.","title":"Getting started"},{"location":"#installation","text":"You can get FolderSync by purchasing the app Google Play or on our website .","title":"Installation"},{"location":"#technical-requirements","text":"Requires Android 6.0 or newer. Tested to work on phones and tablets with Android OS. Android TV, Android Auto, Chromebook etc. are not officially supported (but might work). Does not require Google Play services to function. Does not require internet connection to function (if you want to sync on internal network).","title":"Technical requirements"},{"location":"changelog/","text":"Changelog For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Changelog"},{"location":"changelog/#changelog","text":"For full documentation visit mkdocs.org .","title":"Changelog"},{"location":"changelog/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"changelog/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"faq/","text":"General Coming soon.","title":"General"},{"location":"faq/#general","text":"Coming soon.","title":"General"},{"location":"faq/scheduling/","text":"Scheduling Coming soon.","title":"Scheduling"},{"location":"faq/scheduling/#scheduling","text":"Coming soon.","title":"Scheduling"},{"location":"help/","text":"Help Coming soon.","title":"Debug logging"},{"location":"help/#help","text":"Coming soon.","title":"Help"},{"location":"mdm/","text":"Configuration deployment This document describes how to deploy configuration to individual FolderSync devices from a central server using a mobile device management (MDM) system. This functionality requires the Business edition of FolderSync Pro. How it works FolderSync can export a template JSON configuration file that can be distributed to end users. This will configured and maintaned by a superuser that can deploy files to the MDM system that manages the devices of the end users.","title":"Configuration deployment"},{"location":"mdm/#configuration-deployment","text":"This document describes how to deploy configuration to individual FolderSync devices from a central server using a mobile device management (MDM) system. This functionality requires the Business edition of FolderSync Pro.","title":"Configuration deployment"},{"location":"mdm/#how-it-works","text":"FolderSync can export a template JSON configuration file that can be distributed to end users. This will configured and maintaned by a superuser that can deploy files to the MDM system that manages the devices of the end users.","title":"How it works"},{"location":"mdm/deploy/","text":"Deploy configuration Deployment of JSON configuration file should be handled by the MDM. Consult your MDM documentation for guidance to how it supports writing files to storage of managed devices. When deploying the JSON file to end users, it should be put the internal storage folder which FolderSync will check. These JSON file locations are currently supported: <internalStr>/Android/data/dk.tacit.android.foldersync.app/files/import/config.json <internalStr>/FolderSync/import/config.json Note the name of the file: config.json","title":"Deploy configuration"},{"location":"mdm/deploy/#deploy-configuration","text":"Deployment of JSON configuration file should be handled by the MDM. Consult your MDM documentation for guidance to how it supports writing files to storage of managed devices. When deploying the JSON file to end users, it should be put the internal storage folder which FolderSync will check. These JSON file locations are currently supported: <internalStr>/Android/data/dk.tacit.android.foldersync.app/files/import/config.json <internalStr>/FolderSync/import/config.json Note the name of the file: config.json","title":"Deploy configuration"},{"location":"mdm/export/","text":"Creating configuration Before exporting a configuration file, accounts and folderPairs should be configured to exactly match what will end up on the end users devices. When exporting configuration later you can choose to omit login information so the end user will be asked for this on startup of the app. Accounts The path field on account allows for 1 or more placeholders contained in double curly brackets, which the end-user will also be asked for on startup. For example you can specify the following account path: /webdav/{{User ID}}/some/path{{Company Name}}/ The end user will then be asked to enter User ID and Company Name when attempting to login in the startup wizard, when this is shown on import, in addition to username and password. Note: When handing login on import wizard for the end user, the app will try to login for other accounts using the same server and account type, using the username and password provided. Ensure any account with placeholders configured are at the top of the list, if another account without placeholders can use the same account, so the end user has less hassle with entering credentials. FolderPairs The local path field on folderPair allows for 1 placeholder contained in double curly brackets called ExternalSdCard which will transform to the users external SD card path on import. For example you can specify the following device path (remember forward slash after placeholder): {{ExternalSdCard}}/some/path This will then become something like this after import, if external SD card is found: /storage/6464-4544}/some/path Export configuration JSON To export the configuration file go to About->Settings->Export Configuration in the Business edition of foldersync. The JSON file will be written to the configured backup folder. When exporting, the option to include credentials is not selected. It is not recommended to include credentials other than for testing or for manual import use. There is also an update type which defaults to UpdateExisting. The options are described here: UpdateExisting (default) Updates properties of any existing accounts/folderPairs by importKey, else it will add new entries, other accounts/folderPairs are untouched. Will not update folderPairs/accounts that have been configured manually. OverwriteExisting Overwrites any existing accounts/folderPairs by importKey fully, else adds new entries, rest is untouched. RemoveAllExisting Removes all existing accounts/folderPairs, import all in file as new. FolderSync will delete the config.json file after import. AppendToExisting Don't touch existing accounts/folderPairs, import all as new. Editing the JSON file The JSON export file contains a description field, which content is shown in wizard and you can put some helpful text and a link in there if you need to point users to an online help guide. { \"config\": { \"description\": \"Optional description goes here.\", \"updateType\": \"UpdateExisting\" } }","title":"Creating configuration"},{"location":"mdm/export/#creating-configuration","text":"Before exporting a configuration file, accounts and folderPairs should be configured to exactly match what will end up on the end users devices. When exporting configuration later you can choose to omit login information so the end user will be asked for this on startup of the app.","title":"Creating configuration"},{"location":"mdm/export/#accounts","text":"The path field on account allows for 1 or more placeholders contained in double curly brackets, which the end-user will also be asked for on startup. For example you can specify the following account path: /webdav/{{User ID}}/some/path{{Company Name}}/ The end user will then be asked to enter User ID and Company Name when attempting to login in the startup wizard, when this is shown on import, in addition to username and password. Note: When handing login on import wizard for the end user, the app will try to login for other accounts using the same server and account type, using the username and password provided. Ensure any account with placeholders configured are at the top of the list, if another account without placeholders can use the same account, so the end user has less hassle with entering credentials.","title":"Accounts"},{"location":"mdm/export/#folderpairs","text":"The local path field on folderPair allows for 1 placeholder contained in double curly brackets called ExternalSdCard which will transform to the users external SD card path on import. For example you can specify the following device path (remember forward slash after placeholder): {{ExternalSdCard}}/some/path This will then become something like this after import, if external SD card is found: /storage/6464-4544}/some/path","title":"FolderPairs"},{"location":"mdm/export/#export-configuration-json","text":"To export the configuration file go to About->Settings->Export Configuration in the Business edition of foldersync. The JSON file will be written to the configured backup folder. When exporting, the option to include credentials is not selected. It is not recommended to include credentials other than for testing or for manual import use. There is also an update type which defaults to UpdateExisting. The options are described here: UpdateExisting (default) Updates properties of any existing accounts/folderPairs by importKey, else it will add new entries, other accounts/folderPairs are untouched. Will not update folderPairs/accounts that have been configured manually. OverwriteExisting Overwrites any existing accounts/folderPairs by importKey fully, else adds new entries, rest is untouched. RemoveAllExisting Removes all existing accounts/folderPairs, import all in file as new. FolderSync will delete the config.json file after import. AppendToExisting Don't touch existing accounts/folderPairs, import all as new.","title":"Export configuration JSON"},{"location":"mdm/export/#editing-the-json-file","text":"The JSON export file contains a description field, which content is shown in wizard and you can put some helpful text and a link in there if you need to point users to an online help guide. { \"config\": { \"description\": \"Optional description goes here.\", \"updateType\": \"UpdateExisting\" } }","title":"Editing the JSON file"},{"location":"mdm/glossary/","text":"Glossary End user User which will use install FolderSync and sync files on their device. Superuser Administrative user with access to MDM system who will be responsible for deployment of configuration to end user devices.","title":"Glossary"},{"location":"mdm/glossary/#glossary","text":"End user User which will use install FolderSync and sync files on their device. Superuser Administrative user with access to MDM system who will be responsible for deployment of configuration to end user devices.","title":"Glossary"},{"location":"mdm/import/","text":"Import configuration When the end user opens the app and the app is able to find a configuration JSON file in a predfined location on internal storage, FolderSync will show an import wizard to the end user where they will be asked to login to any accounts found and enter any custom values specified in the account path. If credentials are in the config file or if the user has previously completed login for accounts found in the JSON file then no import wizard will be shown. Only configuration created as part of on import can be updated/overwritten by a new import. Manually created accounts/folderPairs will not be touched (unless updateType in JSON is configured to use update type RemoveAllExisting, in which case everything will be deleted). Checking for updates The app will check for a file each 12 hours (if running), and will then set to trigger the wizard on the next start if needed. File is always checked on a cold start of the app.","title":"Import configuration"},{"location":"mdm/import/#import-configuration","text":"When the end user opens the app and the app is able to find a configuration JSON file in a predfined location on internal storage, FolderSync will show an import wizard to the end user where they will be asked to login to any accounts found and enter any custom values specified in the account path. If credentials are in the config file or if the user has previously completed login for accounts found in the JSON file then no import wizard will be shown. Only configuration created as part of on import can be updated/overwritten by a new import. Manually created accounts/folderPairs will not be touched (unless updateType in JSON is configured to use update type RemoveAllExisting, in which case everything will be deleted).","title":"Import configuration"},{"location":"mdm/import/#checking-for-updates","text":"The app will check for a file each 12 hours (if running), and will then set to trigger the wizard on the next start if needed. File is always checked on a cold start of the app.","title":"Checking for updates"}]}